generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  preferredTransport String?   @default("all")
  preferredCurrency  String?   @default("TRY")
  interests          String?
  preferences        Json?

  accounts           Account[]
  sessions           Session[]
  trips              Trip[]

  // Back-relations (email üzerinden)
  aiConversationsByEmail  AiConversation[] @relation("UserToAiConversationByEmail")
  accommodationsByEmail   Accommodation[]  @relation("UserToAccommodationByEmail")
  transportationsByEmail  Transportation[] @relation("UserToTransportationByEmail")
  tripPlansByEmail        TripPlan[]       @relation("UserToTripPlanByEmail")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id              String           @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  budget          Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  city            String
  country         String?
  notes           String?
  status          TripStatus       @default(PLANNED)

  accommodations  Accommodation[]
  activities      Activity[]
  conversations   AiConversation[]
  budgetItems     BudgetItem[]
  dailyPlans      DailyPlan[]
  transportations Transportation[]
  tripPlans       TripPlan[]

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  time        String?
  location    String?
  cost        Float?
  category    String?
  tripId      String
  placeId     String?
  coordinates Json?
  duration    Int?
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model AiConversation {
  id         String   @id @default(cuid())
  tripId     String
  messages   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  summary    String?
  tags       String?

  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Email ile User'a bağ
  userEmail  String?
  userByEmail User?   @relation("UserToAiConversationByEmail", fields: [userEmail], references: [email], onDelete: SetNull)

  @@index([userEmail])
}

model Accommodation {
  id            String   @id @default(cuid())
  tripId        String
  name          String
  location      String?
  checkIn       DateTime
  checkOut      DateTime
  price         Float
  priceUnit     String   @default("total")
  bookingUrl    String?
  type          String?
  amenities     String?
  address       String?
  coordinates   Json?
  rating        Float?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("pending")
  confirmation  String?

  trip          Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Email ile User'a bağ
  userEmail     String?
  userByEmail   User?    @relation("UserToAccommodationByEmail", fields: [userEmail], references: [email], onDelete: SetNull)

  @@index([userEmail])
}

model Transportation {
  id                 String   @id @default(cuid())
  tripId             String
  type               String
  provider           String?
  departureTime      DateTime
  arrivalTime        DateTime
  departureLocation  String
  arrivalLocation    String
  price              Float
  bookingReference   String?
  bookingUrl         String?
  seats              String?
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  status             String   @default("pending")

  trip               Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Email ile User'a bağ
  userEmail          String?
  userByEmail        User?    @relation("UserToTransportationByEmail", fields: [userEmail], references: [email], onDelete: SetNull)

  @@index([userEmail])
}

model DailyPlan {
  id         String   @id @default(cuid())
  tripId     String
  date       DateTime
  title      String?
  notes      String?
  activities Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model BudgetItem {
  id            String    @id @default(cuid())
  tripId        String
  category      String
  description   String
  amount        Float
  currency      String    @default("TRY")
  date          DateTime?
  isEstimate    Boolean   @default(true)
  isPaid        Boolean   @default(false)
  paymentMethod String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trip          Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripPlan {
  id               String      @id @default(cuid())
  tripId           String?
  city             String
  country          String?
  startDate        DateTime?
  endDate          DateTime?
  duration         String?
  sehir_bilgisi    String?
  gun_plani        String?
  yemek_rehberi    String?
  pratik_bilgiler  String?
  butce_tahmini    String?
  raw_markdown     String?
  raw_html         String?
  ai_model         String?
  generated_at     DateTime    @default(now())
  user_id          String?
  total_cost       Float?
  daily_cost       Float?
  interests        String?
  budget_level     String?
  travel_style     String?
  accommodation    String?
  transportation   String?
  status           TripStatus  @default(PLANNED)
  completedAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  trip             Trip?       @relation(fields: [tripId], references: [id], onDelete: Cascade)

  // Email ile User'a bağ
  userEmail        String?
  userByEmail      User?     @relation("UserToTripPlanByEmail", fields: [userEmail], references: [email], onDelete: SetNull)

  @@index([city, country])
  @@index([generated_at])
  @@index([user_id])
  @@index([userEmail])
}

enum TripStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
  DONE
}
