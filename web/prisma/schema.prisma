generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  preferredTransport String?   @default("all")
  preferredCurrency  String?   @default("TRY")
  interests          String?   // JSON string of interests
  accounts           Account[]
  sessions           Session[]
  trips              Trip[]
  preferences        Json?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id          String      @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  city        String
  country     String?
  activities  Activity[]
  notes       String?
  status      TripStatus  @default(PLANNED)
  conversations AiConversation[]
  accommodations Accommodation[]
  transportations Transportation[]
  dailyPlans DailyPlan[]
  budgetItems BudgetItem[]
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  time        String?
  location    String?
  cost        Float?
  category    String?
  tripId      String
  trip        Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  placeId     String?   // Google Place ID
  coordinates Json?     // { lat: number, lng: number }
  duration    Int?      // Minutes
}

enum TripStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

model AiConversation {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  messages  Json     // Array of message objects with role, content, timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summary   String?  // Brief summary of conversation outcomes
  tags      String?  // JSON array of topics covered in conversation
}

model Accommodation {
  id          String   @id @default(cuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  name        String
  location    String?
  checkIn     DateTime
  checkOut    DateTime
  price       Float
  priceUnit   String   @default("total") // total, perNight, etc.
  bookingUrl  String?
  type        String?  // hotel, hostel, apartment, etc.
  amenities   String?  // JSON array of amenities
  address     String?
  coordinates Json?    // { lat: number, lng: number }
  rating      Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("pending") // pending, booked, cancelled
  confirmation String? // Booking confirmation code
}

model Transportation {
  id              String   @id @default(cuid())
  tripId          String
  trip            Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  type            String   // flight, train, bus, etc.
  provider        String?  // airline, train company, etc.
  departureTime   DateTime
  arrivalTime     DateTime
  departureLocation String
  arrivalLocation String
  price           Float
  bookingReference String?
  bookingUrl     String?
  seats          String?  // seat numbers
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         String   @default("pending") // pending, booked, cancelled
}

model DailyPlan {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  date      DateTime
  title     String?
  notes     String?
  activities Json     // Array of daily activities with time, title, description, location, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BudgetItem {
  id          String   @id @default(cuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  category    String   // accommodation, transportation, food, activities, etc.
  description String
  amount      Float
  currency    String   @default("TRY")
  date        DateTime?
  isEstimate  Boolean  @default(true)
  isPaid      Boolean  @default(false)
  paymentMethod String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
