"use client";

import Link from "next/link";
import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";

interface BudgetItem {
  id: string;
  category: string;
  description: string;
  amount: number;
  date?: Date;
  isEstimate: boolean;
  isPaid: boolean;
}

export default function BudgetPage() {
  const searchParams = useSearchParams();
  const tripId = searchParams.get("tripId");
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [totalBudget, setTotalBudget] = useState(0);
  const [days, setDays] = useState(5);
  const [budgetItems, setBudgetItems] = useState<BudgetItem[]>([]);
  const [budgetByCategory, setBudgetByCategory] = useState<Record<string, number>>({});

  useEffect(() => {
    // Fetch trip budget data
    if (!tripId) {
      setError("Trip ID is missing. Please select a trip first.");
      setLoading(false);
      return;
    }

    const fetchBudgetData = async () => {
      try {
        // Fetch budget data
        const response = await fetch(`/api/trip/budget?tripId=${tripId}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch budget data");
        }
        
        const data = await response.json();
        setBudgetItems(data.budgetItems);
        setTotalBudget(data.totalBudget);
        setBudgetByCategory(data.budgetByCategory);
        
        // Also fetch trip to get days
        const tripResponse = await fetch(`/api/trip?id=${tripId}`);
        
        if (tripResponse.ok) {
          const tripData = await tripResponse.json();
          if (tripData.trip) {
            const startDate = new Date(tripData.trip.startDate);
            const endDate = new Date(tripData.trip.endDate);
            const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            setDays(diffDays);
          }
        }
      } catch (err) {
        setError("Error loading budget data. Please try again.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchBudgetData();
  }, [tripId]);

  // Toplam harcamayı hesapla
  const totalExpenses = budgetItems.reduce((sum, item) => sum + item.amount, 0);
  const remainingBudget = totalBudget - totalExpenses;
  const budgetPerDay = Math.round(totalBudget / days);
  const expensesPerDay = Math.round(totalExpenses / days);

  // Bütçe oran ve renk hesaplama
  const budgetRatio = totalBudget > 0 ? (totalExpenses / totalBudget) * 100 : 0;
  const budgetColor = 
    budgetRatio > 100 ? 'bg-red-500' :
    budgetRatio > 90 ? 'bg-orange-500' :
    budgetRatio > 75 ? 'bg-yellow-500' :
    'bg-green-500';

  // Kategori dağılımı için renk tanımlamaları
  const categoryColors: Record<string, string> = {
    'ulaşım': 'bg-blue-500',
    'konaklama': 'bg-purple-500',
    'yemek': 'bg-orange-500',
    'aktiviteler': 'bg-green-500',
    'alışveriş': 'bg-pink-500',
    'diğer': 'bg-gray-500',
    'eğlence': 'bg-teal-500',
    // Add defaults for other possible categories
    'transportation': 'bg-blue-500',
    'accommodation': 'bg-purple-500',
    'food': 'bg-orange-500',
    'activities': 'bg-green-500',
    'shopping': 'bg-pink-500',
    'other': 'bg-gray-500',
    'entertainment': 'bg-teal-500',
  };

  return (
    <main className="min-h-screen p-4 md:p-8 bg-gray-900">
      <div className="max-w-6xl mx-auto">
        <div className="mb-6 flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold tracking-tight text-white">
              Bütçe Planlayıcı
            </h1>
            <p className="text-gray-300 mt-2 max-w-2xl">
              Seyahat bütçenizi planlayın, harcamalarınızı takip edin ve seyahat maliyetlerinizi optimize edin.
            </p>
          </div>
          <Link 
            href="/"
            className="mt-4 md:mt-0 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors self-start"
          >
            Ana Sayfaya Dön
          </Link>
        </div>

        {/* Loading, Error, and No Trip ID States */}
        {!tripId && (
          <div className="bg-yellow-800 text-yellow-200 p-4 rounded-lg mb-6">
            <p className="font-medium">Lütfen önce bir seyahat seçin.</p>
            <Link href="/planner" className="underline mt-2 inline-block">
              Seyahat planlarına gitmek için tıklayın
            </Link>
          </div>
        )}

        {error && (
          <div className="bg-red-800 text-red-200 p-4 rounded-lg mb-6">
            <p className="font-medium">{error}</p>
          </div>
        )}

        {loading && tripId ? (
          <div className="bg-gray-800 p-10 rounded-xl shadow-md mb-8 flex justify-center items-center">
            <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
            <span className="ml-3 text-gray-300">Bütçe verisi yükleniyor...</span>
          </div>
        ) : tripId && !error ? (
          <>
            <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
              <h2 className="text-xl font-semibold mb-4 text-white">Bütçe Ayarları</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="totalBudget" className="block text-sm font-medium text-gray-300 mb-1">Toplam Bütçe (TL)</label>
                  <input 
                    type="number" 
                    id="totalBudget" 
                    className="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-white rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={totalBudget}
                    onChange={(e) => setTotalBudget(Number(e.target.value))}
                  />
                </div>
                
                <div>
                  <label htmlFor="days" className="block text-sm font-medium text-gray-300 mb-1">Seyahat Süresi (Gün)</label>
                  <input 
                    type="number" 
                    id="days" 
                    className="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-white rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={days}
                    onChange={(e) => setDays(Number(e.target.value))}
                  />
                </div>
              </div>
            </div>

            {/* Budget Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              {/* Total Budget Card */}
              <div className="bg-gray-800 p-6 rounded-xl shadow-md">
                <h3 className="text-lg font-medium mb-2 text-white">Toplam Bütçe</h3>
                <div className="text-3xl font-bold text-blue-400">{totalBudget.toLocaleString()} TL</div>
                <div className="text-sm text-gray-400 mt-1">Günlük: {budgetPerDay.toLocaleString()} TL</div>
              </div>
              
              {/* Expenses Card */}
              <div className="bg-gray-800 p-6 rounded-xl shadow-md">
                <h3 className="text-lg font-medium mb-2 text-white">Toplam Harcama</h3>
                <div className="text-3xl font-bold text-orange-400">{totalExpenses.toLocaleString()} TL</div>
                <div className="text-sm text-gray-400 mt-1">Günlük: {expensesPerDay.toLocaleString()} TL</div>
              </div>
              
              {/* Remaining Budget Card */}
              <div className="bg-gray-800 p-6 rounded-xl shadow-md">
                <h3 className="text-lg font-medium mb-2 text-white">Kalan Bütçe</h3>
                <div className={`text-3xl font-bold ${remainingBudget >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                  {remainingBudget.toLocaleString()} TL
                </div>
                <div className="text-sm text-gray-400 mt-1">
                  {remainingBudget >= 0 ? 'Bütçe dahilinde' : 'Bütçe aşımı!'}
                </div>
              </div>
            </div>

            {/* Budget Progress */}
            <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
              <h3 className="text-lg font-medium mb-4 text-white">Bütçe Kullanımı</h3>
              
              <div className="mb-2 flex justify-between">
                <span className="text-sm font-medium text-gray-300">
                  {budgetRatio.toFixed(1)}% Kullanıldı
                </span>
                <span className="text-sm text-gray-400">
                  {totalExpenses.toLocaleString()} / {totalBudget.toLocaleString()} TL
                </span>
              </div>
              
              <div className="w-full bg-gray-700 rounded-full h-4">
                <div 
                  className={`${budgetColor} h-4 rounded-full`} 
                  style={{ width: `${Math.min(budgetRatio, 100)}%` }}
                ></div>
              </div>
              
              <div className="mt-6">
                <h4 className="text-md font-medium mb-3 text-white">Kategori Dağılımı</h4>
                <div className="space-y-3">
                  {budgetItems.map(item => {
                    const percentage = (item.amount / totalExpenses * 100).toFixed(1);
                    return (
                      <div key={item.id}>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm font-medium text-white">{item.category}</span>
                          <span className="text-sm text-gray-400">{percentage}% ({item.amount.toLocaleString()} TL)</span>
                        </div>
                        <div className="w-full bg-gray-700 rounded-full h-2">
                          <div 
                            className={`${categoryColors[item.category.toLowerCase() as keyof typeof categoryColors] || 'bg-gray-500'} h-2 rounded-full`} 
                            style={{ width: `${percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>

            {/* Budget Details */}
            <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-white">Bütçe Detayları</h3>
                <button className="px-3 py-1 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors">
                  Yeni Kalem Ekle
                </button>
              </div>
              
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-600">
                  <thead className="bg-gray-700">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Kategori
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Açıklama
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Tutar (TL)
                      </th>
                      <th className="px-6 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Durum
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                        İşlemler
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-gray-800 divide-y divide-gray-700">
                    {budgetItems.map(item => (
                      <tr key={item.id}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className={`w-3 h-3 rounded-full ${categoryColors[item.category.toLowerCase() as keyof typeof categoryColors] || 'bg-gray-500'} mr-2`}></div>
                            <div className="text-sm font-medium text-white">{item.category}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                          {item.description}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-white text-right">
                          {item.amount.toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                          {item.isPaid ? (
                            <span className="px-2 py-1 bg-green-900 text-green-300 rounded-full text-xs">Ödendi</span>
                          ) : (
                            <span className="px-2 py-1 bg-yellow-900 text-yellow-300 rounded-full text-xs">Ödenmedi</span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button className="text-blue-400 hover:text-blue-300 mr-3">Düzenle</button>
                          <button className="text-red-400 hover:text-red-300">Sil</button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot className="bg-gray-700">
                    <tr>
                      <td colSpan={2} className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white text-right">
                        Toplam
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-white text-right">
                        {totalExpenses.toLocaleString()} TL
                      </td>
                      <td colSpan={2}></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            </div>

            {/* Budget Tips */}
            <div className="bg-blue-900 p-6 rounded-xl border border-blue-800 mb-8">
              <h3 className="text-lg font-medium text-blue-300 mb-3">Bütçe İpuçları</h3>
              <ul className="list-disc list-inside space-y-2 text-blue-300">
                <li>Yerel halk tarafından tercih edilen restoranlarda yemek yiyerek yemek maliyetlerinizi düşürebilirsiniz.</li>
                <li>Toplu taşıma kullanarak ulaşım maliyetlerinizi optimize edebilirsiniz.</li>
                <li>Şehir kartları veya müze kartları alarak birçok turistik yeri daha uygun fiyata gezebilirsiniz.</li>
                <li>Alışveriş için yerel pazarları tercih edin, hem daha uygun fiyatlı hem de daha otantik ürünler bulabilirsiniz.</li>
                <li>Konaklama için merkeze yakın olmayan bölgeleri tercih etmek bütçenize katkı sağlayabilir.</li>
              </ul>
            </div>
          </>
        ) : null}
        
        {/* Coming Soon Message */}
        <div className="mt-8 bg-yellow-900 border border-yellow-800 p-4 rounded-lg text-center">
          <p className="text-yellow-300">
            <strong>Bilgilendirme:</strong> Bu özellik şu an beta aşamasındadır. Daha fazla özellik yakında eklenecektir.
          </p>
        </div>
        
        <div className="mt-8 text-sm text-gray-400 text-center">
          &copy; {new Date().getFullYear()} Trip Planner - Tüm hakları saklıdır.
        </div>
      </div>
    </main>
  );
}
